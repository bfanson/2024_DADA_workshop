{
  "articles": [
    {
      "path": "about.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore You Start\r\nPackage Dependencies\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\n‚Ä¶and maybe a refresher on R as well??\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nFor f*sake, now what is this Github thing?\r\nNow, my brain hurts‚Ä¶\r\n\r\nBefore You Start\r\nYou will need R installed on your machine. If your R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. Using R is made much easier by using it through RStudio (_I_ntegrated _D_evelopment _E_nvironment).\r\nIf you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already. You should also have Rtools installed.\r\nTo install, the order of steps are as below:\r\nInstall R (> 4.0.0): https://cran.rstudio.com/\r\ninstall to ‚ÄòC:\\Windows\\program files‚Äô and accept all defaults\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\n‚Ä¶and maybe a refresher on R as well??\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nswitch from Rstudio to Posit‚Ä¶https://posit.co/\r\nRmarkdown to Quarto\r\nRstudio IDE to Positron https://github.com/posit-dev/positron/wiki\r\n\r\nFor f*sake, now what is this Github thing?\r\ncouple notes on navigating Github‚Ä¶https://github.com/bfanson\r\nNow, my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-12T13:35:23+10:00"
    },
    {
      "path": "course_overview.html",
      "title": "Overview of workshop",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nWhat the workshop is trying to do\r\nWhat is it NOT trying to do\r\nLearning objectives\r\nWorkshop Structure\r\nWhat to expect\r\nApproach\r\nMay need to take a step-back at times\r\n\r\nPlug for QEARI\r\nWhat to do when my brain hurts‚Ä¶\r\n\r\nWhat the workshop is trying to do\r\nBecome familiar with data analyst workflow\r\nLearn a workflow from data cleaning to analysis to presenting/communicating results in one platform\r\nIncrease your knowledge about the R workflow, resources, and capabilities üëç\r\nWhat is it NOT trying to do\r\nTurn you into a R programmer/Shiny app developer in 4 days\r\nGoing in-depth into any specific topic (except R workflow)\r\nMake you cry üò¢\r\nLearning objectives\r\nUnderstand ‚Äúmodern‚Äù workflow using R environment\r\nIdentify what R packages are routinely used for each analysis steps\r\nImprove your workflow efficiency, reproducibility, and ‚Äúgeneral sanity‚Äù\r\nHave a resource to reference when stuck or need to refresh memory\r\nWorkshop Structure\r\nThis is 4-day workshop with each day running from 9am-12pm. During each day‚Äôs session, we will cover a new topic in the workflow pipeline.\r\nMonday 2024SEP16: Overview of workflow, importing, cleaning\r\nTuesday 2024SEP17: Analysis of data\r\nWednesday 2024SEP18: Creating reports\r\nThursday 2024SEP19: Creating shiny Apps\r\nWithin each day, the session is structured to be mainly talk and chalk for the first half and then more hands-on for the second half.\r\nNote - We will not be offended if you just stay for the first half\r\nImportantly, tea will be provided!! üòÉ\r\nWhat to expect\r\nApproach\r\nCompared to when we started providing biometrics workshops, the amount of resources and online learning tools has exploded. Partly as a consequence, there has been a homogenization of workflow driven by key leaders in the area that have pushed the technology and analysis paradigms.\r\nGiven this, we will attempt in this workshop to act more as a guide to help you develop a solid framework that you can use as a launching point. We will point out amazing resources out but also hoping that workshop will give you the foundation to dive deeper into the topics specific to your research/needs.\r\nMay need to take a step-back at times\r\nFor some, the last two days of the workshop might push their limits but they are important skills to develop as how we communicate research (and the expectations) is changing quickly.\r\nOn Day 3 (creating reports), the Quarto(/Rmarkdown) approach takes a bit to get used to if you are WYSIWYG (What You See Is What You Get). The key is focus on the higher level concepts (e.g.¬†how it could be useful for you, focus on the higher level concepts (e.g.¬†losing the forest for the trees)). Most importantly, once you have a template to work from and understand a key fundamentals, you can modify easily (often having no clue how most of it works‚Ä¶my approach for years (still?) to be honest).\r\nNow, for Day 4 (Shiny Apps), Shiny is going to look (frustratingly/scaredly/freakishly) different as shown below (heads up):\r\n\r\n\r\nShow code\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  fluidRow( \r\n    selectInput('x','X-Variable', choices = names(mtcars)),\r\n    selectInput('y','Y-Variable', choices = names(mtcars)),\r\n    plotOutput('plot') \r\n)\r\n)\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  output$plot <- renderPlot({\r\n    plot( mtcars[,input$x], mtcars[,input$y] )\r\n    \r\n  })\r\n}# Run the application \r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\nHowever, shiny apps have a very basic structure and once you get that (and a few other key bits), you can often grab other people‚Äôs code and modify slightly to get what you need.\r\nReminder - The goal here is not to make you a programmer but familiar with a few key tools so that you can tinker away.\r\nPlug for QEARI\r\nJust a reminder QEARI (Quantitative Ecology ARI) is a great resource and a safe place for asking ‚Äúdumb‚Äù questions. The amount of expertise among its regulars is impressive! There are multiple channels to ask questions including a new one for shiny Apps!!!\r\n\r\nWhat to do when my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-12T13:35:25+10:00"
    },
    {
      "path": "d1_lubridate.html",
      "title": "Working with dates and time",
      "author": [],
      "contents": "\r\n\r\nContents\r\nDate/time\r\nKey date concepts\r\ndate using lubridate\r\nlubridate vs.¬†base\r\n\r\nKey datetime concepts\r\nTimezones\r\n\r\n\r\nDate/time\r\n\r\n\r\n\r\n#  knitr::include_graphics(\"sessions/day1-getting-data-into-shape/lubridate.pdf\")\r\n\r\n\r\n\r\nKey date concepts\r\ndate using lubridate\r\n\r\n\r\n# tidy way to make a date\r\n  as_date('2001-01-01') # assume Year-month-day\r\n  ymd('2001-01-01')  # better to be specific using helper function\r\n  dmy('01-01-2021') # date the other way\r\n  \r\n# dates are stored as number of days since 1970-01-01 (julian days) in R \r\n  dt <- as_date('1970-01-01')\r\n  class(dt)\r\n  as.numeric(dt)  # days since 1970-01-01 is zero\r\n  as_date('2024-01-01') %>% as.numeric() # 19,723 days since that reference date\r\n  \r\n# EXCEL WARNING: dates are stored as number of days since 1899-12-30 in Excel [leap year bug in Lotus]\r\n  ds <- readxl::read_excel('data/raw/date_example.xlsx') %>% select( starts_with('dt_') )\r\n  head(ds)  # notice the mix of numbers and text...[reminder: databases as so much better than excel]\r\n            # notice the <s3: POSIXct> column type\r\n  ( v_dt <- slice_head(ds, n=4 ) %>% pull(dt_excel) %>% as.numeric() )\r\n  as_date(v_dt)  # obviously wrong because it is using 1970-01-01 as the reference date\r\n  as_date(v_dt,origin='1899-12-30') \r\n  \r\n  # switch from POXICxt to Date\r\n  mutate(ds, dt_correct = as_date(dt_correct) ) # now it is <date>\r\n  \r\n  # for those interested, one possible fix to the column\r\n  mutate(ds, dt_fixed = case_when( !is.na(as.numeric(dt_excel)) ~ as_date( as.numeric(dt_excel), origin='1899-12-30'),\r\n                                   TRUE ~ dmy( dt_excel)  ) )\r\n  # what does AI do? Try \"using tidyverse in R, how can I fix a dataset that has a column that is text that needs to be converted to date but the column has julian days as well as date character formats in it?\"\r\n\r\n\r\n\r\n\r\n\r\n# lots of useful date helpers in lubridate  \r\n  dt <- as_date('2024-09-16')\r\n  year(dt)  # year\r\n  month(dt) # month\r\n  week(dt)  # week in the year\r\n  wday(dt)  # day in the week (monday=2)\r\n  yday(dt)  # day in the year\r\n  leap_year(dt)  # is this year a leap year?\r\n  \r\n#   \r\n  \r\n# tip using built in month vectors\r\n    month.abb[ month(dt) ] # example to get the month abbreviation\r\n    month.name[ month(dt) ] # example to get the month fullname\r\n\r\n\r\nlubridate vs.¬†base\r\nOf course, there was a base way of making as.Date(). as_date() was created to fix a few pitfalls with as.Date(), so it is safer/better to just use as_date()\r\n\r\n\r\n# tidy vs base...  \r\n  as_date('01-11-2021')  # gives error - tidyverse\r\n  as.Date('01-11-2021')  # note the issue - base R\r\n\r\n# note assumptions still happen but tidy is a bit safer  \r\n  as_date('01-01-01') # assumes Year-month-date and that we are 20XX\r\n  as.Date('01-01-01') # no chance of correct\r\n  \r\n  dmy('01-11-2021')  # can you the helper functions to convert\r\n  as_date('01-11-2021', format='%d-%m-%Y') # or add a format for those inclined\r\n  ?strptime  # one place to find format codes\r\n  # copilot - try \"what is the date format code for 01-nov-2022 using R\"  \r\n  \r\n# timezone stuff-ups  \r\n  dt_utc <- ymd_hms(\"2024-09-01 00:50:50\")\r\n  dt_europe <- ymd_hms(\"2024-09-01 00:50:50\", tz = \"Europe/London\")\r\n  c(as_date(dt_utc), as.Date(dt_utc))\r\n  c(as_date(dt_europe), as.Date(dt_europe) )\r\n\r\n  as.Date(dt_europe, tz= tz(dt_europe) ) # have to grab the tz explicitly\r\n\r\n\r\nKey datetime concepts\r\nIt is very analagous to date concepts so let‚Äôs mirror our previous steps\r\n\r\n\r\n# tidy way to make a datetime\r\n  as_datetime('2001-01-01 10:00:00') \r\n\r\n[1] \"2001-01-01 10:00:00 UTC\"\r\n\r\n  ymd_hms('2001-01-01 10:00:00')  # better to be specific using helper function\r\n\r\n[1] \"2001-01-01 10:00:00 UTC\"\r\n\r\n  dmy_hm('01-Nov-2001 10:00')  # better to be specific using helper function\r\n\r\n[1] \"2001-11-01 10:00:00 UTC\"\r\n\r\n# dates are stored as number of seconds since 1970-01-01 00:00:00 in R \r\n  dttm <- ymd_hms('1970-01-01 00:00:60')\r\n  as.numeric(dttm)  # 60 seconds\r\n\r\n[1] 60\r\n\r\n# however, dates are stored as number of days since 1899-12-30 in Excel [leap year bug in Lotus]\r\n  # ds <- readxl::read_excel('data/raw/date_example.xlsx') %>% select( contains('tm_'))\r\n  # head(ds)  # notice the mix of numbers and text...[reminder: databases as so much better than excel]\r\n  #           # notice the <s3: POSIXct> column type\r\n  # ( v_dt <- slice_head(ds, n=4 ) %>% pull(dttm_excel) %>% as.numeric() )\r\n  # as_date(v_dt)  # obviously wrong because it is using 1970-01-01 as the reference date\r\n  # as_date(v_dt,origin='1899-12-30') \r\n  # \r\n  # # switch from POXICxt to Date\r\n  # mutate(ds, dt_correct = as_date(dt_correct) ) # now it is <date>\r\n  # \r\n  # # for those interested, one possible fix to the column\r\n  # mutate(ds, dt_fixed = case_when( !is.na(as.numeric(dt_excel)) ~ as_date( as.numeric(dt_excel), origin='1899-12-30'),\r\n  #                                  TRUE ~ dmy( dt_excel)  ) )\r\n  # what does AI do? Try \"using tidyverse in R, how can I fix a dataset that has a column that is text that needs to be converted to date but the column has julian days as well as date character formats in it?\"\r\n\r\n\r\nTimezones\r\ntimezone_dst <- ‚ÄòAustralia/Melbourne‚Äô\r\ntimezone_no_dst <- ‚ÄòAustralia/Brisbane‚Äô\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T09:34:30+10:00"
    },
    {
      "path": "dataset.html",
      "title": "Workshop Dataset",
      "author": [],
      "contents": "\r\n\r\nContents\r\nProject data\r\nProject overview\r\nPurpose\r\nExperimental design\r\nStudy sites\r\nMonitoring\r\nDesign variables\r\n\r\n\r\nData provided\r\nOverview\r\nWorkshop 2024 data.xls\r\nsite_info tab\r\nspp_traits tab\r\nquad_ht tab\r\nspp_rich tab\r\n\r\ndf_quad_spp.csv\r\ndf_survey_info.csv\r\n\r\n\r\nProject data\r\nFor the workshop, we will be using a greatly reduced dataset from the Wetland Intervention Monitoring Projects (WIMP; thanks Kay Morris üëè).\r\n\r\nWe have done some masking of data\r\nEach day we will provide a Rstudio project that will have the data as well. If you want to start from scratch, click on link below to download project data files and go from there.\r\n\r\n\r\n Download project data\r\n\r\n\r\n\r\nProject overview\r\nPurpose\r\nGoal: Improve grazing management\r\nQuestion: How does grazing intensity affect wetland plants?\r\nFramework: The ecological framework underpinning this study is the Intermediate Disturbance Hypothesis.\r\n\r\nExperimental design\r\nStudy sites\r\nAcross western and eastern Victoria, a total of 28 sites were selected to be surveyed. These sites were spread across four Catchment Management Authorities (CMA) but with the majority of sites in the western CMAs. Sites were chosen partly to cover a wide variation in grazing intensity.\r\n\r\n\r\nShow code\r\n\r\n  sf_site <- sf::read_sf('data/sf_site.gpkg')\r\n  sf_cma <- VicmapR::vicmap_query(layer='open-data-platform:cma100') %>% collect()\r\n  mapview::mapview(sf_cma, zcol='cmaname', layer.name='cma') + \r\n    mapview::mapview(sf_site, zcol='grazing', layer.name='site', col.regions=c('red','blue') )\r\n\r\n\r\n\r\nMonitoring\r\nIn each wetland, we are assessing how vegetation changes over time inside two trial plots. Each trial plot is about 0.25 ha in size. One plot is open to the grazing management being applied in the wetland and the other plot is fenced to exclude livestock (sheep and cattle). Monitoring is done when the wetland is drying out but still wet as this is the when most wetland plants are present. Monitoring is done along transects and quadrats in each plot before fencing, and then every year after fencing for 3-5 years.\r\n\r\nDesign variables\r\nSo, we have a hierarchical experimental design: site/plot/transect/quadrant. Treatments are at two levels. First, we have grazing intensity: crash (intense grazing) or press (less intense). This is at the site level. Next, we have a paired design within a site with fence.\r\n\r\nA large suite of responses were measured in this study. All For the workshop we will focus on two response metrics measured at the quadrat level:\r\nSpecies richness: total number of species\r\nMaximum plant height: measured the tallest plant in the quadrat\r\nData provided\r\nOverview\r\nWe have three files:\r\nWorkshop 2024 data.xls - this is our main file\r\ndf_quad_spp.csv - this includes extra quadrat-level about species present\r\ndf_survey_info.csv - this contains survey info, such as date\r\nLet‚Äôs take a look at\r\nWorkshop 2024 data.xls\r\nThis workbook has four tabs of data.\r\nsite_info tab\r\n\r\nspp_traits tab\r\n\r\nquad_ht tab\r\n\r\nspp_rich tab\r\n\r\ndf_quad_spp.csv\r\n\r\ndf_survey_info.csv\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-13T09:41:02+10:00"
    },
    {
      "path": "evaluation.html",
      "title": "Workshop evaluation",
      "description": "Evaluation of workshop",
      "author": [],
      "contents": "\r\nBelow is a shiny App used for the course evaluation created using shinysurveys package with data saved in Gdrive\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-12T13:35:48+10:00"
    },
    {
      "path": "index.html",
      "title": "Daily Sesssions",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T09:22:37+10:00"
    },
    {
      "path": "inkscape.html",
      "title": "Editing pdfs using Inkscape",
      "description": "Short tutorial on editing pdfs\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\nPurpose\r\nImagine the following scenarios:\r\nYour report is looking great and you are ready to send off to client. Right before, you send you notice minor spelling error in one of the figures. The figure was made by one of co-authors who has buggered off already for the day\r\nYou are making a map which involves tedious placement of spatial labels that you tried to do in R. You just need to nudge the placement for the final version\r\nYou get revisions back from the journal, everything perfect, except they want you to change the axis-labels in plot. You just want to quickly fix and right back before your luck changes.\r\nThe above are all cases in which you just need to modify an insignificant change that have no effect on reproducibility. You just want a quick fix (partly for mental sanity). If you have the original plot figures as pdf (or other vector formats), you can just use vector graphics software like Aboda Illustrator or Inkscape (freeware) to quickly open and change.\r\nProducing pdfs as part of workflow\r\nAs part of my workflow, I produce png and pdfs of all plots/images in the Rmarkdown when I knit it. The figures are labeled by order of appearance.\r\n\r\nUsing Inkscape\r\ndownload and install website\r\nopen inkscape and drop your pdf into the main screen\r\nclick on the object you want to change (similar to ppx when you have multiple objects)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-12T15:22:13+10:00"
    },
    {
      "path": "installR.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore the workshop\r\nPackage Dependencies\r\n\r\nBefore the workshop\r\nYou will need R installed on your machine. If your current R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. but using R is made much easier by using it through RStudio which is an IDE (Integrated Development Environment). Therefore, you will need to install Rstudio as well. Finally, you will need something called rtools to help install certain packages in R.\r\nNote - If you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already.\r\nTo install, the order of steps are as follows (for DEECA computers):\r\nInstall R go to https://cran.rstudio.com/ and do the following:\r\nclick ‚ÄúDownload R for Windows‚Äù\r\n\r\nclick ‚Äúbase‚Äù\r\n\r\nclick ‚ÄòDownload R-4.4.1 for Windows‚Äô\r\n\r\nclick the downloaded ‚ÄòR-4.4.1-win.exe‚Äô to start install\r\nwhen you get to install locations, install to ‚ÄòC:\\Windows\\Program Files‚Äô\r\n\r\naccept all defaults along the way\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\nclick on ‚ÄòRTools 4.4‚Äô\r\n\r\nScroll down until you see ‚ÄòRtools44 Installer‚Äô and click on it:\r\n\r\nClick on the downloaded ‚Äòrtools44-6104-6039.exe‚Äô to start install\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\nclick on ‚ÄòDownload Rstudio‚Ä¶.‚Äô button\r\n\r\nclick on ‚ÄòRStudio-2024.04.2-764.exe‚Äô\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô like rtools and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\n\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nFor newbies, click on ‚Äòinstall‚Äô button in the Packages tab in lower right. Then write in ‚Äòtidyverse‚Äô and click ‚ÄòInstall‚Äô\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-12T13:35:53+10:00"
    }
  ],
  "collections": ["sessions/sessions.json"]
}
