{
  "articles": [
    {
      "path": "about.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore You Start\r\nPackage Dependencies\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\n‚Ä¶and maybe a refresher on R as well??\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nFor f*sake, now what is this Github thing?\r\nNow, my brain hurts‚Ä¶\r\n\r\nBefore You Start\r\nYou will need R installed on your machine. If your R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. Using R is made much easier by using it through RStudio (_I_ntegrated _D_evelopment _E_nvironment).\r\nIf you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already. You should also have Rtools installed.\r\nTo install, the order of steps are as below:\r\nInstall R (> 4.0.0): https://cran.rstudio.com/\r\ninstall to ‚ÄòC:\\Windows\\program files‚Äô and accept all defaults\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nWorkshop prerequisites\r\nUmmm, pretend that I forgot everything about Rstudio (asking for a mate)‚Ä¶\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\n‚Ä¶and maybe a refresher on R as well??\r\nintroduction to Rstudio use‚Ä¶<>\r\n\r\nWait, what is this Posit thing? I thought it was Rstudio\r\nswitch from Rstudio to Posit‚Ä¶https://posit.co/\r\nRmarkdown to Quarto\r\nRstudio IDE to Positron https://github.com/posit-dev/positron/wiki\r\n\r\nFor f*sake, now what is this Github thing?\r\ncouple notes on navigating Github‚Ä¶https://github.com/bfanson\r\nNow, my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:01+10:00"
    },
    {
      "path": "course_overview.html",
      "title": "Overview of workshop",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\n\r\nContents\r\nAcknowledgement of country\r\nWorkshop Structure\r\nWhat the workshop is trying to do\r\nWhat is it NOT trying to do\r\nWhat to expect\r\nApproach\r\nMay need to take a step-back at times\r\n\r\nPlug for QEARI\r\nWhat to do when my brain hurts‚Ä¶\r\n\r\nAcknowledgement of country\r\nI would like to begin by acknowledging the traditional owners of the land on which we are meeting today, the Wurundjeri people of the Kulin Nation, and pay my respects to their Elders past, present and emerging.\r\nWorkshop Structure\r\nThis is a 4-day workshop ( SEP16-19 2024) with each day running from 9am-12pm. During each day‚Äôs session, we will cover a new topic in the workflow pipeline.\r\nMonday: Overview of workflow, importing, cleaning (Ben)\r\nTuesday: Analysis of data (Paul)\r\nWednesday: Creating reports (Paul)\r\nThursday: Creating shiny Apps (Ben)\r\nWithin each day, the session is structured to be mainly ‚Äòtalk-and-chalk‚Äô for the first half and then more hands-on for the second half.\r\n** Notes **\r\nWe will not be offended if you just stay for the first half\r\nAsk questions anytime. Most likely someone else will have the same question. We may defer the question to hands-on section if it is too much of rabbit-hole.\r\nWe will have a wide range of skills across the days\r\nMost Importantly, tea will be provided!! üòÑ\r\nWhat the workshop is trying to do\r\nBecome familiar with data analyst workflow\r\nLearn a workflow from data cleaning to analysis to presenting/communicating results in one platform\r\nIncrease your knowledge about the R workflow, resources, and capabilities üëç\r\nProvide a resource to refer to to help remind you how to get going\r\nWhat is it NOT trying to do\r\nTurn you into a R programmer/Shiny app developer in 4 days\r\nGoing in-depth into any specific topic (except R workflow)\r\nMake you cry üò¢\r\nWhat to expect\r\nApproach\r\nCompared to when we started providing biometrics workshops, the amount of resources and online learning tools has exploded. Partly as a consequence, there has been a homogenization of workflow driven by key leaders in the area that have pushed the technology and analysis paradigms.\r\nGiven this, we will attempt in this workshop to act more as a guide to help you develop a solid framework that you can use as a launching point. We will point out amazing resources out but also hoping that the workshop will give you the foundation to dive deeper into the topics specific to your research/needs. Part of this is introducing to you to tools/concepts as well as introducing to the terminology in R workflows.\r\nMay need to take a step-back at times\r\nFor some, the last two days of the workshop might push their limits but the skills in these session are becoming more important as the expectation of how we communicate our research grows and evolves.\r\nOn Day 3 (creating reports), the Quarto(/Rmarkdown) approach takes a bit to get used to if you are used to WYSIWYG (What You See Is What You Get). The key is to focus on the higher level concepts (e.g.¬†focusing on the higher level concepts of how it could be useful for your research). Most importantly, once you have a template to work from and understand key fundamentals, you can easily modify (often having no clue how most of it works‚Ä¶my approach for years to be honest).\r\nNow, for Day 4 (Shiny Apps), Shiny is going to look, frustratingly, different as shown below:\r\n\r\n\r\nShow code\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  fluidRow( \r\n    selectInput('x','X-Variable', choices = names(mtcars)),\r\n    selectInput('y','Y-Variable', choices = names(mtcars)),\r\n    plotOutput('plot') \r\n)\r\n)\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  output$plot <- renderPlot({\r\n    plot( mtcars[,input$x], mtcars[,input$y] )\r\n    \r\n  })\r\n}# Run the application \r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\nHowever, shiny apps have a very basic structure and once you get that (and a few other key bits), you can often grab other people‚Äôs code and modify slightly to get what you need.\r\nReminder - The goal here is not to make you a programmer but familiar with a few key tools so that you can tinker away.\r\nPlug for QEARI\r\nJust a reminder QEARI (Quantitative Ecology ARI) is a great resource and a safe place for asking ‚Äúdumb‚Äù questions. The amount of expertise among its regulars is impressive! There are multiple channels to ask questions including a new one for shiny Apps!!!\r\n\r\nWhat to do when my brain hurts‚Ä¶\r\nZen out while checking out the 367 Collins Peregrines‚Ä¶.\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:03+10:00"
    },
    {
      "path": "d1_github.html",
      "title": "Notes on github",
      "author": [],
      "contents": "\r\n\r\nContents\r\nVersion Control: Git/Github [Advanced]\r\n\r\nVersion Control: Git/Github [Advanced]\r\nAs part of my due-diligence, I have to mention version control. In short, version control is external software that keeps track of all your changes (so you can go back if something breaks in your code) and very helpful with collaborations (e.g.¬†allowing you both code away and then merging those changes).\r\nFor R/Rstudio, Git/Github is the most popular. Now, Git is the version control software locally on your computer and it does the tracking of all changes In contrast, Github is an online platform in which you can upload those changes (and project folder/files) and is mainly useful for the collaboration/sharing (plus some other useful features)\r\nKey points on Git/Github:\r\nIf not collaborating, the overhead of Git (learning, initial setup, random breaks) might not worth it to you. You still have version histories via Onedrive to save you (not as easy to shift through as Git).\r\nIf collaborating, it really is the best approach that will save you effort in the long run.\r\nIt is worth playing around with Github online so you know how to navigate the website (this workshop will help with that). Github is a rich resource with example code and useful packages not on CRAN. Github project (aka repositories) can look intimidating at first.\r\nRstudio has git integration that makes it easier to work with, though the github desktop\r\nGithub has Github pages which is hosting this website [workflow: 1) write RMD files in Rstudio; 2) upload to Github; 3) Github publishes at https:username.github.io/project_id]\r\nGIT resources to get started\r\nCheatsheet: https://rstudio.github.io/cheatsheets/git-github.pdf\r\nUseful book with R focus: https://happygitwithr.com/\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:04+10:00"
    },
    {
      "path": "d1_importAdvanced.html",
      "title": "Additional info on NA and NaN",
      "author": [],
      "contents": "\r\n\r\nContents\r\nAdvanced topic(s)\r\nImporting lots of files with same (or similar-ish) structure\r\nExcel files and importing color metadata\r\n\r\n\r\nAdvanced topic(s)\r\nImporting lots of files with same (or similar-ish) structure\r\nThere are times that you will want to import 10s or 100s of files that are structurally the same (e.g.¬†camera data, acoustic tagging data). I use the purrr package on almost daily basis. This package was created to help simplify the apply family of functions (e.g.¬†apply,lapply,sapply,mapply) into a more intuitive nomenclature (like the rest of tidyverse). One website that gives a tutorial is https://jennybc.github.io/purrr-tutorial/ (but several others out there).\r\n\r\n\r\n  v_list <- dir('data/raw/tagging',full.names = T)   # get a list of files to import.  use full.names=T to relative path\r\n  importData <- function(x) read_csv( x ) %>% mutate(file_id=x) # create the function that imports a single file\r\n  ds_all <- purrr::map_df( v_list, ~importData(.x) )   # loop through each filename in v_list, combine together into new dataset\r\n\r\n\r\nNote - you could do this using for-loops but it takes more code.\r\nExcel files and importing color metadata\r\nFirst off, just don‚Äôt use cell styles (color) in excel as a way to store data. For instance, using color to indicate treatment.\r\nThat being said, you can extract that information using tidyxl package. I have had good luck with\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:07+10:00"
    },
    {
      "path": "d1_joins.html",
      "title": "Additional info on NA and NaN",
      "author": [],
      "contents": "\r\n\r\nContents\r\n## notes on missing values\r\nNA and NaN in R\r\nother similar values: NaN, Inf\r\nuseful functions\r\nNAs in other functions\r\n\r\n\r\n\r\n\r\n## notes on missing values\r\nreminder of different ways to handle\r\nrun model, will be dropped\r\ncauses errors (NA) in summary (na.rm=T, do not do as a default)\r\nDealing with NA\r\nNA and NaN in R\r\nunique\r\n0/0\r\nas.character( c(NaN, 1) )\r\nas.character( c(NA, 1) )\r\nn_distinct( c(NA,‚Äòa‚Äô,‚Äòb‚Äô) )\r\nother similar values: NaN, Inf\r\n1/0\r\nuseful functions\r\nis.na(), is.Nan(), is.Inf()\r\nNAs in other functions\r\nmean( na.rm=T)\r\nrolling()\r\nstatistical models regression example\r\noptions: delete explicitly (missing at random), imputation techniques (mean)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:08+10:00"
    },
    {
      "path": "d1_lubridate.html",
      "title": "Working with dates and time",
      "author": [],
      "contents": "\r\n\r\nContents\r\nDate/time\r\nKey date concepts\r\ndate using lubridate\r\nlubridate vs.¬†base\r\n\r\nKey datetime concepts\r\nTimezones\r\n\r\n\r\nDate/time\r\n\r\n\r\n\r\nKey date concepts\r\nBelow contain some examples of key concepts.\r\ndate using lubridate\r\n\r\n\r\n# tidy way to make a date\r\n  as_date('2001-01-01') # assume Year-month-day\r\n\r\n[1] \"2001-01-01\"\r\n\r\n  ymd('2001-01-01')  # better to be specific about date format using helper function\r\n\r\n[1] \"2001-01-01\"\r\n\r\n  dmy('01-01-2021') # date the other way\r\n\r\n[1] \"2021-01-01\"\r\n\r\n  dmy('01-JAN-2021') # date the other way\r\n\r\n[1] \"2021-01-01\"\r\n\r\n# dates are stored as number of days since 1970-01-01 (julian days) in R \r\n  dt <- as_date('1970-01-01')\r\n  class(dt)\r\n\r\n[1] \"Date\"\r\n\r\n  as.numeric(dt)  # days since 1970-01-01 is zero\r\n\r\n[1] 0\r\n\r\n  as_date('2024-01-01') %>% as.numeric() # 19,723 days since that reference date\r\n\r\n[1] 19723\r\n\r\nLet‚Äôs read in the following excel file‚Ä¶\r\n\r\nWe will do this using lubridate functions\r\n\r\n\r\n\r\n# EXCEL WARNING: dates are stored as number of days since 1899-12-30 in Excel [leap year bug in Lotus]\r\n  ds <- readxl::read_excel('data/raw/date_example.xlsx') %>% select( starts_with('dt_') )\r\n  head(ds)  # notice the mix of numbers and text...[reminder: databases as so much better than excel]\r\n\r\n# A tibble: 5 √ó 3\r\n  dt_excel   dt_character    dt_correct         \r\n  <chr>      <chr>           <dttm>             \r\n1 45292      2024-January-01 2024-01-01 00:00:00\r\n2 45293      2024-January-02 2024-01-02 00:00:00\r\n3 44927      2023-January-01 2023-01-01 00:00:00\r\n4 44928      2023-January-02 2023-01-02 00:00:00\r\n5 02/01/2023 2023-January-02 2023-01-02 00:00:00\r\n\r\n            # notice the <s3: POSIXct> column type\r\n  ( v_dt <- slice_head(ds, n=4 ) %>%  # example of slice function that grabs first 4 rows \r\n              pull(dt_excel) %>%  # example of using pull to grab a certain column\r\n              as.numeric() )  # \r\n\r\n[1] 45292 45293 44927 44928\r\n\r\n  as_date(v_dt)  # obviously wrong because it is using 1970-01-01 as the reference date\r\n\r\n[1] \"2094-01-02\" \"2094-01-03\" \"2093-01-02\" \"2093-01-03\"\r\n\r\n  as_date(v_dt,origin='1899-12-30') \r\n\r\n[1] \"2024-01-01\" \"2024-01-02\" \"2023-01-01\" \"2023-01-02\"\r\n\r\n  # switch from POXICxt to Date\r\n  mutate(ds, dt_correct = as_date(dt_correct) ) # now it is <date>\r\n\r\n# A tibble: 5 √ó 3\r\n  dt_excel   dt_character    dt_correct\r\n  <chr>      <chr>           <date>    \r\n1 45292      2024-January-01 2024-01-01\r\n2 45293      2024-January-02 2024-01-02\r\n3 44927      2023-January-01 2023-01-01\r\n4 44928      2023-January-02 2023-01-02\r\n5 02/01/2023 2023-January-02 2023-01-02\r\n\r\n  # for those interested, one possible fix to the column\r\n  mutate(ds, dt_fixed = case_when( !is.na(as.numeric(dt_excel)) ~ as_date( as.numeric(dt_excel), origin='1899-12-30'),\r\n                                   TRUE ~ dmy( dt_excel)  ) )\r\n\r\n# A tibble: 5 √ó 4\r\n  dt_excel   dt_character    dt_correct          dt_fixed  \r\n  <chr>      <chr>           <dttm>              <date>    \r\n1 45292      2024-January-01 2024-01-01 00:00:00 2024-01-01\r\n2 45293      2024-January-02 2024-01-02 00:00:00 2024-01-02\r\n3 44927      2023-January-01 2023-01-01 00:00:00 2023-01-01\r\n4 44928      2023-January-02 2023-01-02 00:00:00 2023-01-02\r\n5 02/01/2023 2023-January-02 2023-01-02 00:00:00 2023-01-02\r\n\r\n  # what does AI do? Try \"using tidyverse in R, how can I fix a dataset that has a column that is text that needs to be converted to date but the column has julian days as well as date character formats in it?\"\r\n\r\n\r\n\r\n\r\n\r\n# lots of useful date helpers in lubridate  \r\n  dt <- as_date('2024-09-16')\r\n  year(dt)  # year\r\n\r\n[1] 2024\r\n\r\n  month(dt) # month\r\n\r\n[1] 9\r\n\r\n  week(dt)  # week in the year\r\n\r\n[1] 38\r\n\r\n  wday(dt)  # day in the week (monday=2)\r\n\r\n[1] 2\r\n\r\n  yday(dt)  # day in the year\r\n\r\n[1] 260\r\n\r\n  leap_year(dt)  # is this year a leap year?\r\n\r\n[1] TRUE\r\n\r\n# tip using built in month vectors\r\n    month.abb[ month(dt) ] # example to get the month abbreviation\r\n\r\n[1] \"Sep\"\r\n\r\n    month.name[ month(dt) ] # example to get the month fullname\r\n\r\n[1] \"September\"\r\n\r\nlubridate vs.¬†base\r\nOf course, there was a base way of making as.Date(). as_date() was created to fix a few pitfalls with as.Date(), so it is safer/better to just use as_date()\r\n\r\n\r\n# tidy vs base...  \r\n  as_date('01-11-2021')  # gives error - tidyverse\r\n  as.Date('01-11-2021')  # note the issue - base R\r\n\r\n# note assumptions still happen but tidy is a bit safer  \r\n  as_date('01-01-01') # assumes Year-month-date and that we are 20XX\r\n  as.Date('01-01-01') # no chance of correct\r\n  \r\n  dmy('01-11-2021')  # can you the helper functions to convert\r\n  as_date('01-11-2021', format='%d-%m-%Y') # or add a format for those inclined\r\n  ?strptime  # one place to find format codes\r\n  # copilot - try \"what is the date format code for 01-nov-2022 using R\"  \r\n  \r\n# timezone stuff-ups  \r\n  dt_utc <- ymd_hms(\"2024-09-01 00:50:50\")\r\n  dt_europe <- ymd_hms(\"2024-09-01 00:50:50\", tz = \"Europe/London\")\r\n  c(as_date(dt_utc), as.Date(dt_utc))\r\n  c(as_date(dt_europe), as.Date(dt_europe) )\r\n\r\n  as.Date(dt_europe, tz= tz(dt_europe) ) # have to grab the tz explicitly\r\n\r\n\r\nKey datetime concepts\r\nIt is very analogous to date concepts so let‚Äôs mirror our previous steps\r\n\r\n\r\n# tidy way to make a datetime\r\n  as_datetime('2001-01-01 10:00:00') \r\n\r\n[1] \"2001-01-01 10:00:00 UTC\"\r\n\r\n  ymd_hms('2001-01-01 10:00:00')  # better to be specific using helper function\r\n\r\n[1] \"2001-01-01 10:00:00 UTC\"\r\n\r\n  dmy_hm('01-Nov-2001 10:00')  # better to be specific using helper function\r\n\r\n[1] \"2001-11-01 10:00:00 UTC\"\r\n\r\n# dates are stored as number of seconds since 1970-01-01 00:00:00 in R \r\n  dttm <- ymd_hms('1970-01-01 00:00:60')\r\n  as.numeric(dttm)  # 60 seconds\r\n\r\n[1] 60\r\n\r\n# however, dates are stored as number of days since 1899-12-30 in Excel [leap year bug in Lotus]\r\n  # ds <- readxl::read_excel('data/raw/date_example.xlsx') %>% select( contains('tm_'))\r\n  # head(ds)  # notice the mix of numbers and text...[reminder: databases as so much better than excel]\r\n  #           # notice the <s3: POSIXct> column type\r\n  # ( v_dt <- slice_head(ds, n=4 ) %>% pull(dttm_excel) %>% as.numeric() )\r\n  # as_date(v_dt)  # obviously wrong because it is using 1970-01-01 as the reference date\r\n  # as_date(v_dt,origin='1899-12-30') \r\n  # \r\n  # # switch from POXICxt to Date\r\n  # mutate(ds, dt_correct = as_date(dt_correct) ) # now it is <date>\r\n  # \r\n  # # for those interested, one possible fix to the column\r\n  # mutate(ds, dt_fixed = case_when( !is.na(as.numeric(dt_excel)) ~ as_date( as.numeric(dt_excel), origin='1899-12-30'),\r\n  #                                  TRUE ~ dmy( dt_excel)  ) )\r\n  # what does AI do? Try \"using tidyverse in R, how can I fix a dataset that has a column that is text that needs to be converted to date but the column has julian days as well as date character formats in it?\"\r\n\r\n\r\nTimezones\r\nWhen working with timezone daylight savings can be problematic. Depending on project, I often just work with Brsibane timezone that has no daylight savings:\r\n\r\n\r\n  timezone_aedt <- 'Australia/Melbourne' # AEDT with daylight savings\r\n  timezone_aest <- 'Australia/Brisbane'  # AEST with no daylight savings\r\n\r\n  dttm <- ymd_hms('2024-10-16 12:00:00') # note UTC\r\n  dttm\r\n\r\n[1] \"2024-10-16 12:00:00 UTC\"\r\n\r\n  with_tz(dttm, timezone_aedt)\r\n\r\n[1] \"2024-10-16 23:00:00 AEDT\"\r\n\r\n  with_tz(dttm, timezone_aest)\r\n\r\n[1] \"2024-10-16 22:00:00 AEST\"\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:12+10:00"
    },
    {
      "path": "d1_missing.html",
      "title": "Additional info on NA and NaN",
      "author": [],
      "contents": "\r\n\r\nContents\r\n## notes on missing values\r\nNA and NaN in R\r\nother similar values: NaN, Inf\r\nuseful functions\r\nNAs in other functions\r\n\r\n\r\n\r\n\r\n## notes on missing values\r\nreminder of different ways to handle\r\nrun model, will be dropped\r\ncauses errors (NA) in summary (na.rm=T, do not do as a default)\r\nDealing with NA\r\nNA and NaN in R\r\nunique\r\n0/0\r\nas.character( c(NaN, 1) )\r\nas.character( c(NA, 1) )\r\nn_distinct( c(NA,‚Äòa‚Äô,‚Äòb‚Äô) )\r\nother similar values: NaN, Inf\r\n1/0\r\nuseful functions\r\nis.na(), is.Nan(), is.Inf()\r\nNAs in other functions\r\nmean( na.rm=T)\r\nrolling()\r\nstatistical models regression example\r\noptions: delete explicitly (missing at random), imputation techniques (mean)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:12+10:00"
    },
    {
      "path": "d1_restructure.html",
      "title": "Restructuring data",
      "author": [],
      "contents": "\r\n\r\nContents\r\n## notes on missing values\r\nNA and NaN in R\r\nother similar values: NaN, Inf\r\nuseful functions\r\nNAs in other functions\r\n\r\n\r\n\r\n\r\n## notes on missing values\r\nreminder of different ways to handle\r\nrun model, will be dropped\r\ncauses errors (NA) in summary (na.rm=T, do not do as a default)\r\nDealing with NA\r\nNA and NaN in R\r\nunique\r\n0/0\r\nas.character( c(NaN, 1) )\r\nas.character( c(NA, 1) )\r\nn_distinct( c(NA,‚Äòa‚Äô,‚Äòb‚Äô) )\r\nother similar values: NaN, Inf\r\n1/0\r\nuseful functions\r\nis.na(), is.Nan(), is.Inf()\r\nNAs in other functions\r\nmean( na.rm=T)\r\nrolling()\r\nstatistical models regression example\r\noptions: delete explicitly (missing at random), imputation techniques (mean)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:15+10:00"
    },
    {
      "path": "d1_rstudio.html",
      "title": "Additional info on NA and NaN",
      "author": [],
      "contents": "\r\n\r\nContents\r\nRprojects\r\nWhy use?\r\nHow to set-up\r\nHow to open your Rproject\r\n\r\nGetting familiar with Rstudio\r\nTurning off .Rdata\r\nTips/Tricks\r\n\r\nRprojects\r\nWhy use?\r\nRelative Paths\r\nHow to set-up\r\nHow to open your Rproject\r\nGetting familiar with Rstudio\r\nfour windows\r\nShort youtube\r\n\r\n\r\nTurning off .Rdata\r\nTips/Tricks\r\ntab\r\nfills in paths\r\nhexcode color coating\r\ncode folding (#)\r\ninsert pipe: ctrl+shift+M %>%\r\ncomment: ctrl + shift + C\r\nfind in all files\r\nclick on object in ‚ÄúData‚Äù to view and filter the dataset\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:16+10:00"
    },
    {
      "path": "d1_tidyverse.html",
      "title": "Additional info on NA and NaN",
      "author": [],
      "contents": "\r\n\r\nContents\r\nHistorical context\r\nBasic principles\r\nTibbles\r\nPipes: %>% (magittr package)\r\nBuilding ‚Äúsentences‚Äù\r\n‚ÄúOdd‚Äù looking uses\r\nold vs.¬†new: %>% vs.¬†|>\r\n\r\n\r\nHistorical context\r\nbase R [the packages included when you install R the first time]\r\nbase, stats, grid, utils, ‚Ä¶\r\n\r\n\r\n# example of getting a plot using base\r\n  ds <- mtcars  # grab the built-in mtcars dataset\r\n  ds <- ds[, c('mpg','hp')]   # select just the columns you want\r\n  ds$l_100km <- 1/( ds$mpg/3.78 * 1.6 )*100 # convert mile per gallon to liters / 100km\r\n  plot( ds$l_100km ~ ds$hp )  # plot relationship between horsepower and km/l\r\n\r\n\r\nquirky things about R: factors vs character, NAs,\r\nlubridate fixed date quirks\r\nlack of consistency within base and between packages\r\ndata argument might be first or last\r\nBasic principles\r\nhuman-centered\r\nreadable to humans\r\nuses verbs like mutate, select, filter, summarise\r\nuses sentence like structure: noun -> verb -> verb [ Paul -> walks (to work) -> sets up ( his computer) -> creates a plot -> saves plot (to a file) -> calls it day -> walks (home) ]\r\n\r\nconsistent\r\nwhen using tidy functions, you get consistent output data structure (called a tibble)\r\n\r\n\r\n\r\n  # an example of tidyverse consistent structure\r\n  class(mtcars)   # data.frame\r\n  head(mtcars)    # notice the rowlabels\r\n  View(mtcars)    # see the rownames in the spreadsheet\r\n  as_tibble(mtcars,rownames = 'make')  # tidyverse datasets (tibbles) never have rownames\r\n\r\n\r\n\r\ncomposable (chunks)\r\nTibbles\r\nI mentioned briefly above about ‚Äútibbles‚Äù\r\ntibble is data.frame v2.0\r\nbetter printing of the data\r\nhandles some of the quirky things that caught up people\r\ncolumn names\r\n\r\nPipes: %>% (magittr package)\r\nA key component of tidyverse world is the concept of ‚Äúpipes‚Äù. The pipe connects multiples steps into a single sequence of commands.\r\n\r\nJust to make things harder, a new pipe |> has been introduced. It is very similar to %>% but it does act a little different. We will just teach %>% because we are set in our ways\r\nBuilding ‚Äúsentences‚Äù\r\n\r\n\r\n  library(tidyverse)\r\n  head(mtcars)\r\n  mtcars %>% head(10)  # get mtcars, pass to head function, take the first 10 rows\r\n  \r\n# sentence using tidy functions we will dive into below...just follow basic logic\r\n  mtcars %>% \r\n    slice_head(n=10) %>%  # take first 10 rows   \r\n    mutate( mpl = round( mpg/3.79,2 ) ) %>%  # convert mpg to miles per liter (mpl)\r\n    select( mpg, mpl )  # keep just the mpg and mpl columns \r\n\r\n# placeholder \".\"\r\n  mtcars %>% head(5)    \r\n  mtcars %>% head(.,5)  # same as above but explicitly using . to denote the input\r\n\r\n  # example where you want to input the dataset not into first argument spot\r\n  mtcars %>% lm(mpg~hp) %>% summary()  # fails as it is trying lm(formula=mtcars, data=mpg~hp )\r\n  mtcars %>% lm(mpg~hp, data=.) %>% summary()  # referencing the input by \".\"\r\n\r\n\r\n‚ÄúOdd‚Äù looking uses\r\nWith %>% it is worth being aware that you will see different variations that look odd. I show a few examples below.\r\n\r\nNote that you can have different variations using %>% that might look odd. E.g. data %>% head or data %>% .$var. Just be beware\r\n\r\n\r\n  mtcars %>% head  # lack of brackets\r\n  mtcars %>% head(n=3) %>%  bind_rows( ., .)   # multiple \".\" example\r\n  mtcars %>% .$mpg   # grabs a specific column - combining tidyverse with base approaches \r\n  mtcars %>% {c( mean=mean(.$mpg), median=median(.$mpg) ) }  # curly bracket example using \".\" and $ - prevents putting . into c(., mean(.$mpg), median(.$mpg))\r\n\r\n\r\nold vs.¬†new: %>% vs.¬†|>\r\n|> is considered to be ‚Äúsimple‚Äù now compared to %>%\r\nare some differences mainly associated with referring to the passed\r\nTip - set a shortcut for‚Ä¶ Ctrl-Shift-M\r\n\r\n  library(tidyverse)\r\n  head(mtcars)\r\n  mtcars %>% head()\r\n  mtcars |> head() # newer version \r\n\r\n# examples of differences (advanced)\r\n  mtcars %>% head # works\r\n  mtcars |> head  # fails  (must have brackets)\r\n  mtcars |> head()  # works  (must have brackets)\r\n\r\n  #subselecting\r\n  mtcars %>% .$mpg\r\n  mtcars |>  .$mpg  # $ not supported\r\n  mtcars |>  pull(mpg)  # use pull\r\n\r\n  mtcars %>% head(x=., 10) # . works for %>% \r\n  mtcars |>  head(x=., 10)  # . placeholder does not work\r\n  mtcars |>  head(x=_, 10)  # _ placeholder instead\r\n  mtcars |>  head(n=10, x=_)  # _ placeholder instead\r\n  mtcars  %>%   head(n=10, .)  # can place without argument specified\r\n  mtcars  %>%   head(n=10, _)  # must you argument if not in first position\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:18+10:00"
    },
    {
      "path": "dataset.html",
      "title": "Workshop Dataset",
      "author": [],
      "contents": "\r\n\r\nContents\r\nProject data\r\nProject overview\r\nPurpose\r\nExperimental design\r\nStudy sites\r\nMonitoring\r\nDesign variables\r\n\r\n\r\nData provided\r\nOverview\r\nWorkshop 2024 data.xls\r\nsite_info tab\r\nspp_traits tab\r\nquad_ht tab\r\nspp_rich tab\r\n\r\ndf_survey_info.csv\r\ndf_quad_spp.csv\r\n\r\n\r\nProject data\r\nFor the workshop, we will be using a greatly reduced dataset from the Wetland Intervention Monitoring Projects (WIMP; thanks Kay Morris üëè).\r\n\r\nWe have done some masking of data\r\nEach day we will provide a Rstudio project that will have the data as well. If you want to start from scratch, click on link below to download project data files and go from there.\r\n\r\n\r\n Download project data\r\n\r\n\r\n\r\nProject overview\r\nPurpose\r\nGoal: Improve grazing management\r\nQuestion: How does grazing intensity affect wetland plants?\r\nFramework: The ecological framework underpinning this study is the Intermediate Disturbance Hypothesis.\r\nGrazing treatment: Here, we focus on two types of grazing: Press (low intensity for longer) and Crash (high intensity for shorter).\r\n\r\n\r\nShow code\r\n\r\n cowplot::ggdraw() + cowplot::draw_image('images/dataset/idh.PNG')\r\n\r\n\r\n\r\n\r\nExperimental design\r\nStudy sites\r\nAcross western and eastern Victoria, a total of 28 sites were selected to be surveyed. These sites were spread across four Catchment Management Authorities (CMA) but with the majority of sites in the western CMAs. Sites were chosen partly to cover a wide variation in grazing intensity and grazing treatment.\r\n\r\n\r\nShow code\r\n\r\n  sf_site <- sf::read_sf('data/sf_site.gpkg') %>% select(-transect_id)\r\n  sf_cma <- VicmapR::vicmap_query(layer='open-data-platform:cma100') %>% collect()\r\n  mapview::mapview(sf_cma, zcol='cmaname', layer.name='cma') + \r\n    mapview::mapview(sf_site, zcol='grazing', layer.name='site', col.regions=c('red','blue') )\r\n\r\n\r\n\r\nMonitoring\r\nIn each wetland, we are assessing how vegetation changes over time inside two trial plots. Each trial plot is about 0.25 ha in size. One plot is open to the grazing management being applied in the wetland and the other plot is fenced to exclude livestock (sheep and cattle). Monitoring is done when the wetland is drying out but still wet as this is the when most wetland plants are present. Monitoring is done along transects and quadrats in each plot before fencing, and then every year after fencing for 3-5 years.\r\n\r\nDesign variables\r\nSo, we have a hierarchical experimental design: site/plot/transect/quadrant. First we have the site-level. At this level, we have the grazing treatments: Crash (intense grazing, shorter) and Press (less intense, longer). Next, we have a paired design within a site with fence. Within plot we have transects and within transect, quadrats.\r\nAt the quadrat level, a large suite of responses were measured in this study. For the workshop we will focus on two response metrics measured at the quadrat level:\r\nNative species richness: total number of native species (summarised by transect-level)\r\nMaximum plant height: measured the tallest plant in the quadrat\r\n\r\nData provided\r\nOverview\r\nWe have three files:\r\nWorkshop 2024 data.xls - this is our main file\r\ndf_survey_info.csv - this contains survey info, such as date\r\ndf_quad_spp.csv - this includes extra quadrat-level about species present\r\nLet‚Äôs take a look at snapshot of each file\r\nWorkshop 2024 data.xls\r\nThis workbook has four tabs of data.\r\nsite_info tab\r\n\r\nspp_traits tab\r\n\r\nquad_ht tab\r\n\r\nspp_rich tab\r\n\r\ndf_survey_info.csv\r\n\r\ndf_quad_spp.csv\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:36+10:00"
    },
    {
      "path": "evaluation.html",
      "title": "Workshop evaluation",
      "description": "Evaluation of workshop",
      "author": [],
      "contents": "\r\nBelow is a shiny App used for the course evaluation created using shinysurveys package with data saved in Gdrive\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:37+10:00"
    },
    {
      "path": "index.html",
      "title": "Daily Sesssions",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:37+10:00"
    },
    {
      "path": "inkscape.html",
      "title": "Editing pdfs using Inkscape",
      "description": "Short tutorial on editing pdfs\n",
      "author": [],
      "date": "`r Sys.Date()`",
      "contents": "\r\nPurpose\r\nImagine the following scenarios:\r\nYour report is looking great and you are ready to send off to client. Right before, you send you notice minor spelling error in one of the figures. The figure was made by one of co-authors who has buggered off already for the day\r\nYou are making a map which involves tedious placement of spatial labels that you tried to do in R. You just need to nudge the placement for the final version\r\nYou get revisions back from the journal, everything perfect, except they want you to change the axis-labels in plot. You just want to quickly fix and right back before your luck changes.\r\nThe above are all cases in which you just need to modify an insignificant change that have no effect on reproducibility. You just want a quick fix (partly for mental sanity). If you have the original plot figures as pdf (or other vector formats), you can just use vector graphics software like Aboda Illustrator or Inkscape (freeware) to quickly open and change.\r\nProducing pdfs as part of workflow\r\nAs part of my workflow, I produce png and pdfs of all plots/images in the Rmarkdown when I knit it. The figures are labeled by order of appearance.\r\n\r\nUsing Inkscape\r\ndownload and install website\r\nopen inkscape and drop your pdf into the main screen\r\nclick on the object you want to change (similar to ppx when you have multiple objects)\r\n\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:40+10:00"
    },
    {
      "path": "installR.html",
      "title": "Setting up R/Rstudio on DEECA computer",
      "author": [],
      "contents": "\r\n\r\nContents\r\nBefore the workshop\r\nPackage Dependencies\r\n\r\nBefore the workshop\r\nYou will need R installed on your machine. If your current R version is <4.0, it is a good time to update. R is the programming software that does the computations for your analyses. but using R is made much easier by using it through RStudio which is an IDE (Integrated Development Environment). Therefore, you will need to install Rstudio as well. Finally, you will need something called rtools to help install certain packages in R.\r\nNote - If you are using a DEECA machine and and you do not have an open workstation then you may find it difficult to install R, RStudio and a range of R packages. It is recommended you have a workstation setting that allows you to download and install programs (like R and R packages). This is something you need to apply for through the DEECA IT service portal if you have not already.\r\nTo install, the order of steps are as follows (for DEECA computers):\r\nInstall R go to https://cran.rstudio.com/ and do the following:\r\nclick ‚ÄúDownload R for Windows‚Äù\r\n\r\nclick ‚Äúbase‚Äù\r\n\r\nclick ‚ÄòDownload R-4.4.1 for Windows‚Äô\r\n\r\nclick the downloaded ‚ÄòR-4.4.1-win.exe‚Äô to start install\r\nwhen you get to install locations, install to ‚ÄòC:\\Windows\\Program Files‚Äô\r\n\r\naccept all defaults along the way\r\n\r\nDownload the version of Rtools matching your R installation: https://cran.r-project.org/bin/windows/Rtools/\r\nclick on ‚ÄòRTools 4.4‚Äô\r\n\r\nScroll down until you see ‚ÄòRtools44 Installer‚Äô and click on it:\r\n\r\nClick on the downloaded ‚Äòrtools44-6104-6039.exe‚Äô to start install\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô and accept defaults\r\n\r\n\r\nInstall RStudio: https://posit.co/download/rstudio-desktop/\r\nclick on ‚ÄòDownload Rstudio‚Ä¶.‚Äô button\r\n\r\nclick on ‚ÄòRStudio-2024.04.2-764.exe‚Äô\r\ninstall to ‚ÄòC:\\Windows\\Data‚Äô like rtools and accept defaults\r\n\r\nOpen Rstudio as you would any other program to check that it opens. If so, move onto installing packages below\r\n\r\nPackage Dependencies\r\nOne of the strengths of R is that it is open-source and collaborators can contribute their own code in the form of packages. For our workshop we will be downloading some packages on the fly, but one tidyverse will be across days so please download ahead of time (copy code below and paste into R):\r\n\r\n\r\n\r\nFor newbies, click on ‚Äòinstall‚Äô button in the Packages tab in lower right. Then write in ‚Äòtidyverse‚Äô and click ‚ÄòInstall‚Äô\r\n\r\n\r\n\r\n\r\n",
      "last_modified": "2024-09-15T23:09:41+10:00"
    }
  ],
  "collections": ["sessions/sessions.json"]
}
