[
  {
    "path": "sessions/day1-getting-data-into-shape/",
    "title": "Day 1: Getting data into shape",
    "description": "Tidyverse world",
    "author": [
      {
        "name": "Ben Fanson",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-04",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nDay’s objectives\r\nKey packages\r\nExample of some workflows\r\nmine\r\nPaul’s\r\nCommonalities\r\n\r\nAdvantages of workflow\r\nasfd\r\nadsf\r\n\r\nDataset for workshop\r\nRstudio\r\nBasics\r\nTips and tricks\r\n\r\nProgramming good technique\r\nTidyverse framework\r\nHistorical context\r\n\r\nImporting\r\nExcel files\r\nCSV/Table\r\n\r\nJoins\r\nTips and tricks\r\n\r\nRestructuring\r\nString manipulation\r\nDate/time\r\n\r\nDay’s objectives\r\nUnderstand workflow, why it is important, and how to do it using Rstudio/R\r\nHave an understanding of the tidyverse framework and its key packages\r\nWork through an example\r\nKey packages\r\n\r\nExample of some workflows\r\nmine\r\nPaul’s\r\nCommonalities\r\nAdvantages of workflow\r\nasfd\r\nadsf\r\nDataset for workshop\r\nFor this workshop, we will you an example dataset to go through the whole workflow process.\r\nRstudio\r\nYou can find a variety of cheatsheets at https://posit.co/resources/cheatsheets/\r\nBasics\r\nassume familiar with\r\nmight want to turn off .Rdata so everything is fresh on startup (no issues with previous objects so completely reproducible)\r\n\r\nTips and tricks\r\ntab\r\nfills in paths\r\nhexcode color coating\r\ncode folding (#)\r\ninsert pipe: ctrl+shift+M %>%\r\ncomment: ctrl + shift + C\r\nfind in all files\r\nProgramming good technique\r\nconsistent style\r\nmodularize your code (functions - slightly more advanced)\r\nTidyverse framework\r\n\r\nHistorical context\r\nquirky things about R: factors vs character, NAs,\r\ntibble is data.frame v2.0\r\nbetter printing of the data\r\nhandles some of the quirky things that caught up people\r\ncolumn names\r\n\r\nlubridate fixed date quirks\r\nImporting\r\nExcel files\r\n\r\nCSV/Table\r\n\r\n\r\nYour Task\r\n\r\nJoins\r\n\r\n\r\n\r\nShow code\r\n\r\nTRUE\r\n\r\n[1] TRUE\r\n\r\nknitr::include_graphics(“dplyr.pdf”)\r\n\r\nNote: joins = merges (synonyms)\r\nTips and tricks\r\nEssential to make sure that the number of rows out matches your expectation\r\nAlmost all my joins are\r\n\r\nYour Task\r\n\r\nRestructuring\r\n\r\n\r\n\r\nShow code\r\n\r\nTRUE\r\n\r\n[1] TRUE\r\n\r\nknitr::include_graphics(“tidyr.pdf”)\r\n\r\n\r\nYour Task\r\n\r\nString manipulation\r\n\r\n\r\n\r\nShow code\r\n\r\nTRUE\r\n\r\n[1] TRUE\r\n\r\nknitr::include_graphics(“stringr.pdf”)\r\n\r\n\r\nYour Task\r\n\r\nDate/time\r\n\r\n\r\n\r\nShow code\r\n\r\nTRUE\r\n\r\n[1] TRUE\r\n\r\nknitr::include_graphics(“lubridate.pdf”)\r\n\r\n\r\nYour Task\r\n\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-09-03T08:45:31+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day2-analysis-workflow/",
    "title": "Day 2: Analysis workflow",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Paul Moloney",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nHeader1\r\n\r\nHeader1\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-28T08:06:08+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day3-report-writing-with-quarto/",
    "title": "Day 3: Report writing with Quarto",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Paul Moloney",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-02",
    "categories": [],
    "contents": "\r\nHeader 1\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\nHeader 2\r\nHeader 3\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-28T08:03:53+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day4-shiny-apps/",
    "title": "Day 4: Shiny apps",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Ben Fanson",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-01",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nDay’s learning objectives\r\nKey packages\r\nPep talk\r\nLet’s build one together\r\nGo through a simple example\r\nWalk through the key bits\r\nSetting up the app\r\n\r\nStructure of the file\r\nUI (= user interface)\r\nStep 1: pick a layout\r\nStep 2: create the inputs objects: buttons, inputs, drop-down menu\r\n\r\ninput\r\nserver\r\noutput\r\nFolder structure\r\n\r\nThink about how shiny Apps might be useful\r\nVisualising data for clients\r\nData sharing - upload\r\nModel simulations\r\nCreating a shiny app using Rstudio\r\n\r\nReminder on a few R fundamentals\r\nsteps\r\nShiny Templates\r\nAI shiny apps\r\nExercise\r\nYour turn: creating an app for our dataset\r\nApp design\r\nLet’s build something\r\n\r\nJumping back to workflow for Apps\r\nUseful interactive packages for shiny\r\nleaflet\r\nmapview package\r\nleaflet package\r\n\r\nplotly\r\nggiraph\r\n\r\nDeploy your App\r\nARI shiny account\r\nSetting up a shiny account\r\n\r\nlinking your Rstudio to shiny server\r\nDeploying your app\r\nArchiving/deleting your app\r\nCreating Public apps\r\nWRT to Passwords\r\n\r\nShort bit on layouts\r\nBeyond showing results\r\nUploading files\r\nSaving user inputs\r\nDownloading\r\n\r\nAdditional resources\r\nYour task…\r\n\r\nDay’s learning objectives\r\nHave a good understanding of what Shiny apps can do and how it might be useful for you\r\nUnderstand the core structure of Shiny apps: UI, Server, Reactivity\r\nLearn how to create and run an App locally as well as deploy on ARI’s shiny account\r\nFeel confident enough to grab example code from Rshiny gallery ⛪\r\nKey packages\r\n\r\nPep talk\r\nOkay, before we get started, I think that it is useful to give a pep talk. For the more programming-phobic of you, the Shiny code will look foreign. You first reaction might be “for f*ksake, I am a researcher, not a programmer and I do not want to be programmer” and “are you serious after all this time I spent learning R coding and now I have to learn another type of programming??”\r\n\r\n\r\nShow code\r\n\r\nlibrary(shiny)\r\n\r\n# Define UI for application that draws a histogram\r\nui <- fluidPage(\r\n  fluidRow( \r\n    selectInput('x','X-Variable', choices = names(mtcars)),\r\n    selectInput('y','Y-Variable', choices = names(mtcars)),\r\n    plotOutput('plot') \r\n)\r\n)\r\n# Define server logic required to draw a histogram\r\nserver <- function(input, output, session) {\r\n  output$plot <- renderPlot({\r\n    plot( mtcars[,input$x], mtcars[,input$y] )\r\n    \r\n  })\r\n}# Run the application \r\n\r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\nBut, we swear that it is not a bad at it looks. Once you get beyond the foreignness of the code, we guarantee that with a little guidance, you can easily get started making your own apps in minutes. It is just about getting the basic structure and then having the confidence to do “trial-and-error” with borrowed code. Just be forewarned, shiny Apps can become addicting!!!\r\nLet’s build one together\r\nGo through a simple example\r\nWe will work through an example of building a simple app that displays a graph depending on the conditions selected. The example will demonstrate AI here…\r\nWalk through the key bits\r\nSetting up the app\r\n\r\nFor you app setup, you can either select a single file called app.R [like we did in the example] or you can create two files: ui.R and server.R. What this is doing is just breaking up the one file into two, otherwise basically the same. The advantage of the latter is in larger apps and for reusing code. We will stick with one file method for rest of today.\r\nStructure of the file\r\n\r\n\r\nShow code\r\n\r\n\r\n# 1) Define extra packages and global objects (e.g. your dataset, model results, formats...)\r\nlibrary(shiny)\r\nlibrary(tidyverse)\r\n\r\n\r\n# 2) Define UI for application [how it looks to the user]\r\nui <- fluidPage(    \r\n  \r\n)\r\n\r\n# 3) Define server logic [steps taken when app starts and user clicks something]\r\nserver <- function(input, output) {\r\n}\r\n\r\n# 4) Run the application \r\nshinyApp(ui = ui, server = server)\r\n\r\n\r\n\r\nVisual model of the file…\r\n\r\nUI (= user interface)\r\nThis is what the user will be using to explore your data/results/visualizations.\r\nStep 1: pick a layout\r\nFirst step is determining what kind of layout you want. Single panel, main panel with sidepanel, tabs\r\nXXXXXX CREATE IMAGE OF DIFFERENT LAYOUTS XXXXXXX\r\nOf course the cheatsheet has some basic layout functions\r\n\r\nStep 2: create the inputs objects: buttons, inputs, drop-down menu\r\nOnce layout is figured out, now you add in the input objects. In our example that was a drop-down menu that allowed the user to pick cylinder size.\r\nAgain, cheatsheet has the basic ones listed for you\r\n\r\nLet’s have a look at the cheatsheet\r\n\r\nFew key points\r\nbasically creating html using simple functions\r\n\r\ninput\r\nlike an R list\r\nsetup by the UI\r\ncan only be changed by the user (immutable from being changed in the server code)\r\nserver\r\nThe server is the heart of the app. Let revisit the visual model…\r\n\r\nThree main bits… 1) You have the inputs coming in that will be used 2) R code that will take the inputs and convert to new output(s) 3) the output list is created and exported back to UI\r\nLet’s look a little closer at the server code\r\n\r\n\r\nShow code\r\n\r\nserver <- function(input, output) {\r\n  output$scatterPlot <- renderPlot({\r\n    # Filter the data based on the selected number of cylinders\r\n    filteredData <- mtcars[mtcars$cyl == input$cyl, ]\r\n    \r\n    # Create the scatterplot with ggplot2\r\n    ggplot(filteredData, aes(x = hp, y = mpg)) +\r\n      geom_point() +\r\n      geom_smooth(method = \"lm\", se = TRUE, color = \"blue\") +\r\n      labs(title = paste(\"Scatterplot of hp vs mpg for\", input$cyl, \"cylinders\"),\r\n           x = \"Horsepower (hp)\",\r\n           y = \"Miles per Gallon (mpg)\") +\r\n      theme_minimal()\r\n  })\r\n  \r\n}\r\n\r\n\r\n\r\nAlright, let’s look more at the options for output in the cheatsheet\r\n\r\nNote - this is not a comprehensive list and packages might have then own renderXXX()\r\noutput\r\nbasically a list sending the outputs back to the UI to display\r\nkey bit here is that there are specific functions to output that pair up with renderXXX()\r\n\r\nFolder structure\r\nThink about how shiny Apps might be useful\r\nVisualising data for clients\r\nIbis Tracker - Nev’s masterpiece\r\nhttps://arisci.shinyapps.io/ibisTracker/\r\nData sharing - upload\r\nModel simulations\r\nCreating a shiny app using Rstudio\r\n\r\n\r\nShow code\r\n\r\n#install.packages(\"shiny\")\r\n\r\n\r\n\r\nYou can find a variety of cheatsheets at https://posit.co/resources/cheatsheets/\r\n\r\n\r\nShow code\r\n\r\n  knitr::include_graphics(\"shiny.pdf\")\r\n\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\n library(shiny) \r\n ui <- fluidPage(   \"Hello, world!\" ) \r\n server <- function(input, output, session) { } \r\n shinyApp(ui, server)\r\n\r\n\r\nReminder on a few R fundamentals\r\nLISTS\r\nsteps\r\nadd UI controls\r\nthis is separated by commas!!!!\r\nSo many nested brackets!!!!\r\n\r\nadd “behaviour” to server side\r\nShiny uses reactive programming to make apps interactive.\r\nnot separated by commas…more like R programming but order does not matter!!! (except if within a reactive() or renderXXX() function\r\nR code within reactive() and renderXXX() functions\r\ndouble-breaks renderXXX({ }} when multiple lines\r\n\r\ndeclare your package, global objects prior to setting up your UI and Server\r\nShiny Templates\r\nhow might you look it up\r\nextras at < https://github.com/nanxstats/awesome-shiny-extensions>\r\nAI shiny apps\r\nExercise\r\nLet’s create replicate Examples https://shiny.posit.co/r/gallery/\r\nYour turn: creating an app for our dataset\r\nApp design\r\nLet’s build something\r\nJumping back to workflow for Apps\r\nThis will become pretty useful for collaborations and your own self-learning. Also, we now have a ARI shiny account and consistency allows for increased sharing and understanding.\r\nUseful interactive packages for shiny\r\ncan check https://r-graph-gallery.com/interactive-charts.html\r\nleaflet\r\nmapview package\r\nThe mapview package can be used to set up a simple, quick leaflet. This would be most useful when the leaflet is created on startup. For instance, you might want to show all the sites surveyed and attach metadata (e.g. dates surveyed, number of fish caught, number of plots) to that point.\r\n\r\n\r\nShow code\r\n\r\n  mapview::renderMapview()  # server side\r\n  mapview::mapviewOutput()  # UI side\r\n\r\n\r\nleaflet package\r\nNow, if you are going to build maps that will change with user input, it is best to build from “scratch” using leaflet package (+ other leaflet extra packages; see Justin’s intro on leaflet’s XXXXXXX)\r\nWhen you have user inputs affecting the map shown, you want to try to avoid rebuilding the map object and rather just modify the elements that the user wants changed (e.g. drop lines and add points instead). This requires using reactive programming and observe() functions. Ask Nev to share his app code or\r\nXXXXXX find apps to reference on gallery XXXXX\r\n\r\n\r\nShow code\r\n\r\n  leaflet::leafletOutput()  # UI side\r\n\r\n  leaflet::renderLeaflet()  # server side - creates the basemap\r\n  leaflet::leafletProxy()   # this is the server function that updates the map \r\n\r\n\r\n\r\nplotly\r\n\r\n\r\nShow code\r\n\r\n  library(ggplot2)\r\n  library(plotly)\r\n  f <- ggplot( cars, aes(speed, dist)  ) + geom_point() + geom_smooth()\r\n   plotly::ggplotly(f)\r\n\r\n\r\n\r\n\r\nHow a shiny App code might look of the above…\r\n\r\n\r\n Download Shiny App for plotly\r\n\r\n\r\n\r\nggiraph\r\nI like this one for linking up plots…below, put your cursor over a dot on the left or a bar on the right\r\nIf you know CSS, can be pretty powerful…\r\n\r\n\r\nShow code\r\n\r\nlibrary(ggiraph)\r\nlibrary(tidyverse)\r\nlibrary(patchwork)\r\n\r\nmtcars_db <- rownames_to_column(mtcars, var = \"carname\")\r\n\r\n# First plot: Scatter plot\r\nfig_pt <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = disp, y = qsec,\r\n    tooltip = carname, data_id = carname\r\n  )\r\n) +\r\n  geom_point_interactive(\r\n    size = 3, hover_nearest = TRUE\r\n  ) +\r\n  labs(\r\n    title = \"Displacement vs Quarter Mile\",\r\n    x = \"Displacement\", y = \"Quarter Mile\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Second plot: Bar plot\r\nfig_bar <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = reorder(carname, mpg), y = mpg,\r\n    tooltip = paste(\"Car:\", carname, \"<br>MPG:\", mpg),\r\n    data_id = carname\r\n  )\r\n) +\r\n  geom_col_interactive(fill = \"skyblue\") +\r\n  coord_flip() +\r\n  labs(\r\n    title = \"Miles per Gallon by Car\",\r\n    x = \"Car\", y = \"Miles per Gallon\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Combine the plots using patchwork\r\n combined_plot <- fig_pt + fig_bar + plot_layout(ncol = 2) \r\n\r\n# Combine the plots using cowplot\r\n# combined_plot <- cowplot::plot_grid(fig_pt, fig_bar, ncol=2) \r\n\r\n# Create a single interactive plot with both subplots\r\ninteractive_plot <- girafe(ggobj = combined_plot)\r\n\r\n# Set options for the interactive plot\r\ngirafe_options(\r\n  interactive_plot,\r\n  opts_hover(css = \"fill:cyan;stroke:black;cursor:pointer;\"),\r\n  opts_selection(type = \"single\", css = \"fill:red;stroke:black;\")\r\n)\r\n\r\n\r\n\r\n\r\nHow a shiny App code might look of the above…\r\n\r\n\r\n\r\n\r\nDeploy your App\r\nARI shiny account\r\nThanks to Nev and Jim in particular 👏, we now have a ARI shiny Professional account (called arisci). This account is available to all ARI staff though we do have limits on the number of account users (max = 25 user accounts) but it can have an unlimited number of apps and has 10,000 usage hours (per month). The shiny apps are hosted on https://www.shinyapps.io/ and have https://arisci.shinyapps.io/XXAppNameXX address (e.g. https://arisci.shinyapps.io/ibisTracker/).\r\nSetting up a shiny account\r\nChat with others in your area and decide whether it may be useful to have a program-wide (similar) account for multiple users. If you are likely a higher user, it may be best to have your own account\r\nEmail Jim Thomson [“The Gatekeeper”] requesting\r\nYou will receive an invite to create an account. For your account, you will use your email (or designated person) as the username and then set a password\r\nlinking your Rstudio to shiny server\r\nAll account holders can access all the apps on the shared account. To ensure that you do not mess with other user’s apps accidentally please use the rsconnect package for all you uploading, modification, archiving and deletion of apps – you connection will have its own token. https://cran.r-project.org/web/packages/rsconnect/readme/README.html.\r\n\r\nIf you prefer, you can use rsconnect package via code. Get the name, token, and secret info from the token page when logged into https://www.shinyapps.io/.\r\n\r\n\r\nShow code\r\n\r\nrsconnect::setAccountInfo(name='arisci',\r\n                           token='XXXXX',\r\n                           secret='XXXXX' )  \r\n\r\n\r\nDeploying your app\r\nYou can use the publish approach via Rstudio (GUI approach):\r\n\r\nOr you can do the rsconnect way (just make sure the current directory is where the app is)\r\n\r\n\r\nShow code\r\n\r\nrsconnect::deployApp( )  \r\n\r\n# or if in a different directory, specify the directory\r\n\r\nrsconnect::deployApp('app/appAmazing' )  \r\n\r\n\r\n\r\nArchiving/deleting your app\r\nTo prevent deleting of others apps, you should archive the app using rsconnect code below. You can just type into Rconsole and run, assuming that you have setup your shiny connection (as shown above)\r\n\r\n\r\nShow code\r\n\r\nrsconnect::terminateApp(appName = 'appName')  # this will archive the app.\r\n\r\n\r\nCreating Public apps\r\nAt the moment, a protocol is being developed to request that you can make your app “public” (sharing the link beyond biodiversity division) if it contains any data that is not otherwise public, or potentially have any sensitivities. For this to occur, a Manager/Director sign off will be required for the final published version. Until a formal process is solidified, an email with a brief description of the content of the app, its intended audience, and whether it will be password protected for end users or not along with the request should suffice.\r\nWRT to Passwords\r\nCreating logins/passwords is another can of worms. There are multiple packages out there to help, e.g. shinyauthr, shinymanager. If you need at some point, probably a great question for QEARI and see what people are doing.\r\nShort bit on layouts\r\nhttps://shiny.posit.co/r/layouts/\r\nBeyond showing results\r\nUploading files\r\nSaving user inputs\r\nDownloading\r\nAdditional resources\r\nFor useful resources: https://shiny.posit.co/r/articles/ For useful examples: https://shiny.posit.co/r/articles/\r\nsee https://mastering-shiny.org/\r\n\r\nAsides can be useful for preso.\r\nYour task…\r\nPrize for best app - Build an app for voting…\r\n\r\nYour Turn\r\nBuild a shiny app to communicate Day 2 analysis results to your client. Things you might want to include:\r\nA map\r\nModel estimates\r\n\r\nXXXXX create a simple shiny app for study results XXXXX\r\n\r\n\r\n\r\nPossible steps: 1) Decide on what outputs you want to show 2) How does the user interact with the app? 3) Based on the outputs, which layout works best for you? Go to shiny layouts to pick one or try AI 4)\r\n\r\n\r\n\r\n",
    "preview": "sessions/day4-shiny-apps/distill-preview.png",
    "last_modified": "2024-09-03T08:50:26+10:00",
    "input_file": {}
  }
]
