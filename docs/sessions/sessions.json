[
  {
    "path": "sessions/day1-getting-data-into-shape/",
    "title": "Day 1: Getting data into shape",
    "description": "Tidyverse world",
    "author": [
      {
        "name": "Ben Fanson",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-04",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nHeader1\r\nKey packages\r\nSide note about cheatsheats\r\n\r\n\r\nHeader1\r\nKey packages\r\nrun some code to pull key hexstickers together\r\nSide note about cheatsheats\r\nYou can find a variety of cheatsheets at https://posit.co/resources/cheatsheets/\r\n\r\n\r\nShow code\r\n\r\n  knitr::include_graphics(\"tidyr.pdf\")\r\n\r\n\r\n\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-30T12:39:14+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day2-analysis-workflow/",
    "title": "Day 2: Analysis workflow",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Paul Moloney",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-03",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nHeader1\r\n\r\nHeader1\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-28T08:06:08+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day3-report-writing-with-quarto/",
    "title": "Day 3: Report writing with Quarto",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Paul Moloney",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-02",
    "categories": [],
    "contents": "\r\nHeader 1\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill at https://rstudio.github.io/distill.\r\nHeader 2\r\nHeader 3\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-28T08:03:53+10:00",
    "input_file": {}
  },
  {
    "path": "sessions/day4-shiny-apps/",
    "title": "Day 4: Shiny apps",
    "description": "A short description of the post.",
    "author": [
      {
        "name": "Ben Fanson",
        "url": "https://bfanson.github.io/2024DADAworkshop/"
      }
    ],
    "date": "2024-09-01",
    "categories": [],
    "contents": "\r\n\r\nContents\r\nGeneral thoughts\r\nDay Objectives\r\nThink about how shiny Apps might be useful\r\nVisualising data for clients\r\nData sharing - upload\r\nModel simulations\r\n\r\nReminder on a few R fundamentals\r\nCreating a shiny app using Rstudio\r\nsteps\r\nShiny Templates\r\nExercise\r\nWalk through of creating App for our dataset\r\nApp design\r\nLet’s build something\r\n\r\nJumping back to workflow for Apps\r\nUseful interactive packages for shiny\r\nleaflet\r\nplotly\r\nggiraph\r\n\r\nDeploy your App\r\nARI shiny account\r\nrsconnect package\r\n\r\nShot bit on layouts\r\nBeyond showing results\r\nUploading files\r\nSaving user inputs\r\nDownloading\r\n\r\nAdditional resources\r\n\r\nGeneral thoughts\r\nFor Shiny Apps, the code looks foreign and a bit are you serious after all this time I spent learning R coding\r\nOnce you get the basic structure, you can easily get started and then it is “Trial and Error”\r\nDay Objectives\r\nUnderstand the core structure of Shiny apps: UI, Server, Reactivity\r\nLearn how to create and run an App locally\r\nLearn how to deploy your App on ARI’s shiny account\r\nThink about how shiny Apps might be useful\r\nVisualising data for clients\r\nIbis Tracker - Nev masterpiece\r\nhttps://arisci.shinyapps.io/ibisTracker/\r\nData sharing - upload\r\nModel simulations\r\nReminder on a few R fundamentals\r\nLISTS\r\nCreating a shiny app using Rstudio\r\n\r\n\r\nShow code\r\n\r\n#install.packages(\"shiny\")\r\n\r\n\r\n\r\nYou can find a variety of cheatsheets at https://posit.co/resources/cheatsheets/\r\n\r\n\r\nShow code\r\n\r\n  knitr::include_graphics(\"shiny.pdf\")\r\n\r\n\r\n s\r\n\r\n\r\nShow code\r\n\r\n# library(shiny) \r\n# ui <- fluidPage(   \"Hello, world!\" ) \r\n# server <- function(input, output, session) { } \r\n# shinyApp(ui, server)\r\n\r\n\r\nsteps\r\nadd UI controls\r\nthis is separated by commas!!!!\r\nSo many nested brackets!!!!\r\nadd “behaviour” Shiny uses reactive programming to make apps interactive.\r\nnot separated by commas…more like R programming but order does not matter!!!\r\n\r\nyou put R code in renderFunction\r\nShiny Templates\r\nhow might you look it up\r\nextras at < https://github.com/nanxstats/awesome-shiny-extensions>\r\nExercise\r\nLet’s create replicate Examples https://shiny.posit.co/r/gallery/\r\nWalk through of creating App for our dataset\r\nApp design\r\nLet’s build something\r\nJumping back to workflow for Apps\r\nThis will become pretty useful for collaborations and your own self-learning. Also, we now have a ARI shiny account and consistency allows for increased sharing and understanding.\r\nUseful interactive packages for shiny\r\ncan check https://r-graph-gallery.com/interactive-charts.html\r\nleaflet\r\nplotly\r\n\r\n\r\nShow code\r\n\r\n  library(ggplot2)\r\n  library(plotly)\r\n  f <- ggplot( cars, aes(speed, dist)  ) + geom_point() + geom_smooth()\r\n   plotly::ggplotly(f)\r\n\r\n\r\n\r\n\r\nHow a shiny App code might look of the above…\r\n\r\n\r\n Download Shiny App for plotly\r\n\r\n\r\n\r\nggiraph\r\nI like this one for linking up plots…below, put your cursor over a dot on the left or a bar on the right\r\nIf you know CSS, can be pretty powerful…\r\n\r\n\r\nShow code\r\n\r\nlibrary(ggiraph)\r\nlibrary(tidyverse)\r\nlibrary(patchwork)\r\n\r\nmtcars_db <- rownames_to_column(mtcars, var = \"carname\")\r\n\r\n# First plot: Scatter plot\r\nfig_pt <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = disp, y = qsec,\r\n    tooltip = carname, data_id = carname\r\n  )\r\n) +\r\n  geom_point_interactive(\r\n    size = 3, hover_nearest = TRUE\r\n  ) +\r\n  labs(\r\n    title = \"Displacement vs Quarter Mile\",\r\n    x = \"Displacement\", y = \"Quarter Mile\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Second plot: Bar plot\r\nfig_bar <- ggplot(\r\n  data = mtcars_db,\r\n  mapping = aes(\r\n    x = reorder(carname, mpg), y = mpg,\r\n    tooltip = paste(\"Car:\", carname, \"<br>MPG:\", mpg),\r\n    data_id = carname\r\n  )\r\n) +\r\n  geom_col_interactive(fill = \"skyblue\") +\r\n  coord_flip() +\r\n  labs(\r\n    title = \"Miles per Gallon by Car\",\r\n    x = \"Car\", y = \"Miles per Gallon\"\r\n  ) +\r\n  theme_bw()\r\n\r\n# Combine the plots using patchwork\r\n combined_plot <- fig_pt + fig_bar + plot_layout(ncol = 2) \r\n\r\n# Combine the plots using cowplot\r\n# combined_plot <- cowplot::plot_grid(fig_pt, fig_bar, ncol=2) \r\n\r\n# Create a single interactive plot with both subplots\r\ninteractive_plot <- girafe(ggobj = combined_plot)\r\n\r\n# Set options for the interactive plot\r\ngirafe_options(\r\n  interactive_plot,\r\n  opts_hover(css = \"fill:cyan;stroke:black;cursor:pointer;\"),\r\n  opts_selection(type = \"single\", css = \"fill:red;stroke:black;\")\r\n)\r\n\r\n\r\n\r\n\r\nHow a shiny App code might look of the above…\r\n\r\n\r\n Download Shiny App for ggiraph\r\n\r\n\r\n\r\nDeploy your App\r\nARI shiny account\r\nrsconnect package\r\n\r\n\r\nShow code\r\n\r\ninstall.packages('rsconnect')\r\n\r\n\r\ninstall.packages('rsconnect')\r\nrsconnect::setAccountInfo(name=\"<ACCOUNT>\", token=\"<TOKEN>\", secret=\"<SECRET>\")\r\nShot bit on layouts\r\nhttps://shiny.posit.co/r/layouts/\r\nBeyond showing results\r\nUploading files\r\nSaving user inputs\r\nDownloading\r\nAdditional resources\r\nFor useful resources: https://shiny.posit.co/r/articles/ For useful examples: https://shiny.posit.co/r/articles/\r\nsee https://mastering-shiny.org/\r\n\r\nAsides can be useful for preso.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2024-08-29T15:23:20+10:00",
    "input_file": {}
  }
]
